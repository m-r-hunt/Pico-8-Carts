pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
cur_frame=0
frame_size=64
frame_line=frame_size/2
frame_total_size=64*64/2
frame_base=0x0300

screen_line=128/2
screen_frame_base=0x6000+32*screen_line+32/2

curs_x=32
curs_y=32

last_mx=0
last_my=0
last_mb=0

max_frames=8

transitions={
 {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},
 {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},
 {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},
 {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},
 {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},
 {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},
 {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},
 {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},
}

playing=false

cur_col=12

ui={}

function _init()
 --memset(frame_base,0x0,max_frames*frame_total_size)
 
 poke(0x5f2d, 1)
 last_mx=stat(32)
 last_my=stat(33)
 
 ui={
  {32,32,64,64,edit},
  {0,0,9,65,frame},
  {0,112,128,9,cols},
  {0,122,128,8,trans},
  {120,0,8,8,csave},
  {120,8,8,8,clipsave},
  {120,16,8,8,clipload}
 }
end

function copy_frame_to_screen(edit)
 local base=0x6000
 if (edit) base=screen_frame_base
 for i=0,frame_size-1 do
  memcpy(base+i*screen_line,frame_base+cur_frame*frame_total_size+i*frame_line,frame_line)
 end
end

function copy_frame_from_screen()
 for i=0,frame_size-1 do
  memcpy(frame_base+cur_frame*frame_total_size+i*frame_line,screen_frame_base+i*screen_line,frame_line)
 end
end

function _update60()
 if btnp(5) or (stat(34)==2 and last_mb~=2) then
  playing=not playing
 end
 if (btn(0)) curs_x-=1
 if (btn(1)) curs_x+=1
 if (btn(2)) curs_y-=1
 if (btn(3)) curs_y+=1
 
 if (stat(32)~=last_mx) curs_x=stat(32) last_mx=stat(32)
 if (stat(33)~=last_mx) curs_y=stat(33) last_mx=stat(33)
  
 if playing then
  copy_frame_to_screen(false)
  if btnp(4) or (stat(34)==1 and last_mb~=1) then
   clicked=pget(curs_x/2,curs_y/2)
   if transitions[cur_frame+1][clicked+1]~=8 then
    cur_frame=transitions[cur_frame+1][clicked+1]
   end
  end
 else
  click()
 end
 
 last_mb=stat(34)
end

function edit(lpressed,ldown,rpressed,rdown)
 if ldown then
  copy_frame_to_screen(true)
  circfill(curs_x,curs_y,5,cur_col)
  copy_frame_from_screen()
 end
end

function frame(lpressed,ldown,rpressed,rdown)
 if lpressed then
  cur_frame=mid(0,flr(curs_y/8),7)
 end
end

function cols(lpressed,ldown,rpressed,rdown)
 if lpressed then
  cur_col=flr(curs_x/8)
 end
end

function trans(lpressed,ldown,rpressed,rdown)
 if lpressed then
  transitions[cur_frame+1][flr(curs_x/8)+1]=(transitions[cur_frame+1][flr(curs_x/8)+1]+1)%9
 elseif rpressed then
  transitions[cur_frame+1][flr(curs_x/8)+1]=(transitions[cur_frame+1][flr(curs_x/8)+1]-1)%9
 end
end

function click()
 lpressed=btnp(4) or (stat(34)==1 and last_mb~=1)
 ldown=btn(4) or stat(34)==1
 rpressed=btnp(5) or (stat(34)==2 and last_mb~=2)
 rdown=btn(5) or stat(34)==2
 for u in all(ui) do
  if curs_x>=u[1] and curs_x<u[1]+u[3] and curs_y>=u[2] and curs_y<u[2]+u[4] then
   u[5](lpressed,ldown,rpressed,rdown)
  end
 end
end

function _draw()
 cls()
 
 if playing then
  poke(0x5f2c,3) --set 64x64 mode
  copy_frame_to_screen(false)
  pset(curs_x/2,curs_y/2,15)
 else
  poke(0x5f2c,0) --set 64x64 mode
  
  rect(31,31,96,96,7)
  copy_frame_to_screen(true)
 
  for i=0,max_frames-1 do
   rect(0,i*8,8,i*8+8,7)
   print(i+1,2,i*8+2,7)
  end
  for i=0,max_frames-1 do
   if (i==cur_frame) rect(0,i*8,8,i*8+8,11)
  end
  
  line(0,111,128,111,7)
  for i=0,15 do
   rectfill(i*8,112,i*8+8,120,i)
   rect(i*8,121,i*8+7,128,7)
   if transitions[cur_frame+1][i+1]~=8 then
    print(transitions[cur_frame+1][i+1]+1,i*8+3,123,7)
   end
  end
  
  spr(1,120,0)
  spr(2,120,8)
  spr(3,120,16)
 
  pset(curs_x,curs_y,15)
 
  --debug
  for u in all(ui) do
   --rect(u[1],u[2],u[1]+u[3]-1,u[2]+u[4]-1,10)
  end
  print("mem:"..stat(0),0,104,7)
  print("cpu:"..stat(1),0,112,7)
  print(stat(7).."fps",0,120,7)
 end
end
-->8
-- px8 by zep
-- gfx,sfx,map ression

-- compression parameters
p={}
p.cbits  = 1   -- max:7
p.remap = true


-----------------------------
-- decompression
-----------------------------

function remap(i,w,h)
 local sx=flr((i/64)%(w/8))
 local sy=flr((i/64)/(w/8))
 local x=(i%8)
 local y=flr(flr(i%64)/8)
 return (sx*8+x)+(sy*8+y)*w
end


function decomp(src, px,py,xget,xset)

 local pn={}
 src-=1 
 local bit=256
 local b=0
 
 function getval(bits)
  val=0
  for i=0,bits-1 do

   --get next bit from stream
   if (bit==256) then
    bit=1
    src+=1
    byte=peek(src)
   end
   if band(byte,bit)>0 then
    val+=shl(1,i)
   end
   bit*=2
   
  end
  return val
 end
 
 -- read header
 
 local w = getval(8)
 local h = getval(8)
 local cbits = getval(3)
 local rmp = getval(1) 
 local maxci = getval(8)
 local bpp = getval(3)+1
 local clist={}
 for i=0,maxci do
  clist[i]=getval(bpp)
 end
 
 -- spans
 
 local i = 0
 local span = 0
 
 while (i < w*h) do

  -- span length 
  local bl = 1
  while getval(1)==0 do
   bl += 1 end
  
  local minv=shl(1,bl-1)
  if (bl==1) minv=0
  
  local len=
   getval(max(1,bl-1))+minv+1

  for j=0,len-1 do
  
   local i1 = i
   
   if (rmp==1) i1=remap(i,w,h)
   
   x = px+(i1)%w
   y = py+flr(i1/w)
   
   -- predict colour
   
   local t=xget(x+0,y-1)/16
   local l=xget(x-1,y+0)*16
   if (y==py) t=0
   if (x==px) l=0
   
   pc=pn[t+l] or pn[t] or pn[l]
   
   if (span%2 == 0) then
    -- raw literal
    
    local index=0
    
    repeat
     v=getval(cbits)
     index += v
    until (v < shl(1,cbits)-1)
    
    local pindex=999
    for i=0,maxci do
     if (pc==clist[i]) pindex=i
    end
    
    if (pindex <= index) index+=1
    
    col = clist[index]
    
    -- move to front
    for i=index,1,-1 do
     clist[i]=clist[i-1]
    end
    clist[0] = col
    
   else
    -- predicted

    col = pc
    
   end
   
   xset(x,y,col)
      
   -- adjust predictions
   
   pn[t]=col
   pn[l]=col
   pn[t+l]=col
   
   i += 1
  end
  span += 1
  
 end
 

end


-----------------------------
-- compression
-----------------------------

function comp(x0,y0,w,h,dest,xget)

 local dest0 = dest
 local pn={}
 local dat={}
 local dat2={}
 local i=0
 
 local byte=0
 local bit=1
 
 function putbit(bval)
  if (bval) byte+=bit
  poke(dest, byte)
  bit*=2
  if (bit==256) then
   bit=1 byte=0
   dest += 1			
  end
 end
 
 function putval(val, bits)
  if (bits == 0) return
  for i=0,bits-1 do
   putbit(band(val,shl(1,i))>0)
  end
 end
 
 function putsplen(len)
  -- how many bits?
  blen=1				
  while (shl(1,blen) <= len) 
   do blen+=1 end
  putval(0,(blen-1))
  putval(1,1)
  
  minv=shl(1,blen-1)
  if (blen==1) minv=0
  			
  putval(len-minv,
   max(1,blen-1))
 
 end
 
 -- 1. generate list of
 -- colour values and predictions
 
 for i=0,w*h-1 do
 
   i1=i
   if (p.remap) i1=remap(i,w,h)
   
   x = x0+(i1%w)
   y = y0+flr(i1/w)
   
   local t=xget(x+0,y-1)/16
   local l=xget(x-1,y+0)*16
   if (y==y0) t=0
   if (x==x0) l=0
   c = xget(x,y)
   
   -- predict
   
   pc=nil

   if (pc==nil) pc=pn[t+l]
   if (pc==nil) pc=pn[t]
   if (pc==nil) pc=pn[l]
  
   -- first value never predicted
   if (i==0) pc=nil
     	
  	-- if could predict, set
  	-- flag 0x100
  	
  	if (pc == c) then
  	 dat[i] = c + 0x100
  	else
  	 dat[i] = c
  	end
  	
  	-- store prediction
  	dat2[i] = pc
  	
  	-- add predictions
   
   pn[t]=c
   pn[l]=c
   pn[t+l]=c
  
 end
 
 -- 3. starting indexes
 
 
 -- 3.1 write header
 
 putval(w,8)
 putval(h,8)
 putval(p.cbits,3)  
 
 if (p.remap) then
  putval(1,1)
 else
  putval(0,1)
 end
 
 
 -- 3.2 starting colour list
 -- (in order encountered)
 local clist={}
 local found={}
 local cols=0
 
 local maxcol=0
 
 for i=0,w*h-1 do
  local i1 = remap(i, w,h)
  local x = x0+(i1%w)
  local y = y0+flr(i1/w)
  local col=xget(x,y)
  if (not found[col]) then
   clist[cols]=col
   found[col]=true
   cols+=1
   maxcol=max(maxcol,col)
  end
 end
 
 -- calc bpp needed to store
 -- maxcol
 
 local bpp=1
 while (shl(1,bpp) <= maxcol) do
  bpp += 1
 end
 
 -- write colour list
 
 putval(cols-1,8) -- max 256
 putval(bpp-1,3) -- max 8
 for i=0,cols-1 do
  putval(clist[i],bpp)
 end
 
 -- 3.3 write spans
 
 len = w*h
 pos = 0
 
 p.spans=0
 p.indexes=0
 
 while (pos < len) do
  p.spans+=1
  
  -- calculate length of span
  
  slen=0 p2=pos
  
  if (dat[pos] >= 0x100) then
  
   -- span of predictions
   -- every item must be correct
   -- prediction
   
   while (p2 < len and
          dat[p2] >= 0x100) do
    p2 += 1
   end
   
   slen = p2-pos
  
  else
  
   -- span of non-predicted
   -- colour list indexes
   
   while (
          p2 < len and
          (
           dat[p2] < 0x100 or
           p2 == len-1 
          )) do
    p2 += 1
   end
   
   slen = p2-pos
   
  end
  
  		
  -- write span length
  putsplen(slen-1)
  
  				
  if (dat[pos] < 0x100) then
  
   -- span of colour indices
   
   for j=0,slen-1 do
   
    local col=dat[pos+j]%256
    local pcol=dat2[pos+j]
    
    -- find position in clist
    local index
    local pindex=100
    for i=0,cols-1 do
     if(clist[i]==col) index=i
     if(clist[i]==pcol) pindex=i
    end
    
    -- move to front
    for i=index,1,-1 do
     clist[i]=clist[i-1]
    end
    clist[0]=col
    
    -- if predicted colour
    -- was earlier in list, can
    -- subtract one
    
    if (pindex < index) index-=1
    
    -- write the index	
    
    v=index -- amount to write
    
    local maxval=shl(1,p.cbits)-1
    
    while(v>=0) do
     w=min(maxval, v)
     putval(w, p.cbits)
     v -= maxval
    end
    
    p.indexes += 1
   end
   
  end
  
  pos += slen
 end
 
 return dest-dest0 + 1

end

-->8
--serialization

function csave(lpressed,ldown,rpressed,rdown)
 if lpressed then
  cstore()
 end
end

--implement save to/from clipboard
--using zep's px8
--we're kind of pushing the limits of px8
--so we need 2 custom get/set fns
--to make sure everything stays <=255

function bgget(x,y)
 local addr=frame_base+flr(y)*32+flr(flr(x)/2)
 local val=peek(addr)
 if (x%2)!=0 then
  val=shr(val,4)
 end
  return band(val,0b1111)
end

function bgset(x,y,c)
 local addr=frame_base+flr(y)*32+flr(flr(x)/2)
 val=peek(addr)
 mask=0b11110000
 if x%2!=0 then
  c=shl(c,4)
  mask=0b00001111
 end
 val=bor(band(val,mask),c)
 poke(addr,val)
end

function bgget2(x,y)
 local addr=frame_base+0x2000+flr(y)*32+flr(flr(x)/2)
 local val=peek(addr)
 if (x%2)!=0 then
  val=shr(val,4)
 end
  return band(val,0b1111)
end

function bgset2(x,y,c)
 local addr=frame_base+0x2000+flr(y)*32+flr(flr(x)/2)
 val=peek(addr)
 mask=0b11110000
 if x%2!=0 then
  c=shl(c,4)
  mask=0b00001111
 end
 val=bor(band(val,mask),c)
 poke(addr,val)
end

function clipsave(lpressed,ldown,rpressed,rdown)
 if lpressed then
  out=""
  mem=0x6000
  for t in all(transitions) do
   for tt in all(t) do
    out=out..tt.." "
   end
  end
  clen=comp(0,0,64,4*64-1,mem,bgget)
  out=out..clen.." "
  len2=comp(0,0,64,4*64-1,mem+clen,bgget2)
  for i=0x6000,mem+clen+len2 do
   out=out..peek(i).." "
  end
  printh(out,"@clip")
 end
end

function clipload(lpressed,ldown,rpressed,rdown)
 if lpressed then
  ins=stat(4)
  strings={}
  last=0
  for i=1,#ins do
   if sub(ins,i,i)==" " then
    add(strings,sub(ins,last,i-1))
    last=i+1
   end
  end
  
  idx=1
  for t in all(transitions) do
   for tt,_ in pairs(t) do
    --t[tt]=tonum(strings[idx])
    idx+=1
   end
  end
  clen=strings[idx]
  idx+=1
  for i=idx,#strings do
   poke(0x6000+i-idx,tonum(strings[i]))
  end
  decomp(0x6000,0,0,bgget,bgset)
  decomp(0x6000+clen,0,0,bgget2,bgset2)
 end
end
__gfx__
00000000777777770000070700000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000707007070000007000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700707007070070077700700777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000707777070077070707700707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000700000077777770777777707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700700770070077070707700707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000070070070700700707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000777777770000077700000777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000ccccc00000000000000000000000000000000000000
00000000000000000000ccccccc0000000000000000000000000000000000000000000000000000000cccccccccc000000000000000000000000000000000000
00000000000000000cccccccccccc000000000000000000000000000000000000000000000000000ccccccccccccc00000000000000000000000000000000000
000000000000000ccccccccccccccc0000000000000000000000000000000000000000000000000ccccccccccccccc0000000000000000000000000000000000
00000000000000cccccccccccccccc00000000000000000000000000000000000000000000000cccccccccccccccccc000000000000000000000000000000000
000000000000cccccccccccccccccccc00000000cccccc000000000000000000000000000000ccccccccccccccccccccc000000cccccccc00000000000000000
00000000000cccccccccccccccccccccc00000cccccccccc000000000000000000000000000cccccccccccccccccccccccc0ccccccccccccc000000000000000
0000000000ccccccccccccccccccccccccccccccccccccccc0000000000000000000000000ccccccccccccccccccccccccccccccccccccccc000000000000000
000000000ccccccccccccc0cccccccccccccccccccccccccc000000000000000000000000ccccccccccccc00ccccccccccccccccccccccccc000000000000000
000000000cccccccccccc000cccccccccccccccccccccccc0000000000000000000000000cccccccccccc0000cccccccccccccccccccccc00000000000000000
000000000ccccccccccc000000cccccccccccccccccccc000000000000000000000000000ccccccccccc0000000ccccccccccccccccc00000000000000000000
000000000ccccccccccc00000000cccccccccccccc0000000000000000000000000000000ccccccccccc00000000ccccccccccccccc000000000000000000000
000000000cccccccccccc00000ccccccccccccccccc000000000000000000000000000000cccccccccccc0000ccccccccccccccccccc00000000000000000000
000000000cccccccccccc000ccccccccccccccccccccc0000000000000000000000000000cccccccccccc00cccccccccccccccccccccc0000000000000000000
0000000000cccccccccccccccccccccccccccccccccccc0000000000000000000000000000ccccccccccccccccccccccccccccccccccccc00000000000000000
0000000000ccccccccccccccccccccccccccccccccccccccc00000000000000000000000000ccccccccccccccccccccccccccccccccccccccc00000000000000
00000000000cccccccccccccccccccccc000ccccccccccccccc000000000000000000000000ccccccccccccccccccccc00000ccccccccccccccc000000000000
000000000000ccccccccccccccccccc000000ccccccccccccccc0000000000000000000000000cccccccccccccccccc0000000cccccccccccccc000000000000
0000000000000ccccccccccccccccc000000000ccccccccccccc00000000000000000000000000ccccccccccccccc0000000000ccccccccccccc000000000000
000000000000000ccccccccccccc000000000000cccccccccccc0000000000000000000000000000ccccccccccc00000000000000ccccccccccc000000000000
000000000000000000ccccccc0000000000000000cccccccccccc0000000000000000000000000000000000000000000000000000cccccccccccc00000000000
00000000000000000000000000000000000000000ccccccccccccc0000000000000000000000000000000000000000000000000000cccccccccccc0000000000
000000000000000000000000000000000000000000cccccccccccc0000000000000000000000000000000000000000000000000000cccccccccccc0000000000
0000000000000000000000000000000000000000000ccccccccccc00000000000000000000000000000000000000000000000000000ccccccccccc0000000000
00000000000000000000000000000000000000000000ccccccccc00000000000000000000000000000000000000000000000000000000ccccccc000000000000
0000000000000000000000000000000000000000000000ccccc00000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000

