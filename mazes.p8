pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- mazes tech demo
-- (c) 2016 max hunt (cc by-sa)

--   0
--   ^
--   |
--3<-o->1
--   |
--   v
--   2

maze = {}

function blank_maze(n,m)
 maze={}
 for i=1,m,1 do
 maze[i]={}
 	for j=1,n,1 do
 	 maze[i][j]={}
 	 maze[i][j].left = 0
 	 maze[i][j].right = 0
 	 maze[i][j].up = 0
 	 maze[i][j].down = 0
 	 maze[i][j].visited=0
  end
 end
 return maze
end

function binary_tree(n,m)
 maze = blank_maze(n,m)
 for i=1,m do
 	for j=1,n do
  	if ((i==m) and (j==n)) then
  	-- do nothing
  	elseif (i==m) then
   	maze[i][j].right = 1
   	maze[i][j+1].left = 1
  	elseif (j==n) then
   	maze[i][j].down = 1
   	maze[i+1][j].up = 1
  	elseif (flr(rnd(2))==0) then
   	maze[i][j].right = 1
   	maze[i][j+1].left = 1
  	else
   	maze[i][j].down = 1
   	maze[i+1][j].up = 1
  	end
  end
 end
 return maze
end

function sidewinder(n,m)
 maze = blank_maze(n,m)
 for i=1,m do
 current_run=0
 	for j=1,n do
 	 if i==m and j==n then
 	  -- do nothing
 	 elseif i==m then
 	  maze[i][j].right=1
 	  maze[i][j+1].left=1
 	 elseif j==n or (flr(rnd(2))==0) then
 	  --close run
 	  down=j-current_run+flr(rnd(current_run+1))
 	  maze[i][down].down=1
 	  maze[i+1][down].up=1
 	  current_run=0
 	 else
 	  current_run+=1
 	  maze[i][j].right=1
 	  maze[i][j+1].left=1
 	 end
 	end
 end
 return maze
end

function aldous_broder(n,m)
 maze = blank_maze(n,m)
 flip()
 draw_maze(maze)
 flip()
 finished=false
 x = flr(rnd(n))+1
 y = flr(rnd(m))+1
 maze[x][y].visited=1
 last = time()
 while not finished do
  to_go = flr(rnd(4))
  nx=x
  ny=y
  if to_go==0 then
   nx=max(1,x-1)
   if maze[nx][ny].visited!=1 then
    maze[nx][ny].visited=1
    maze[x][y].up=1
    maze[nx][ny].down=1
    
    pset(ny*2-1,nx*2,0)
   end
  elseif to_go==2 then
   nx=min(m,x+1)
   if maze[nx][ny].visited!=1 then
    maze[nx][ny].visited=1
    maze[x][y].down=1
    maze[nx][ny].up=1
    
    pset(y*2-1,x*2,0)
   end
  elseif to_go==3 then
   ny=max(1,y-1)
   if maze[nx][ny].visited!=1 then
    maze[nx][ny].visited=1
    maze[x][y].left=1
    maze[nx][ny].right=1
    
    pset(ny*2,nx*2-1,0)
   end
  elseif to_go==1 then
   ny=min(n,y+1)
   if maze[nx][ny].visited!=1 then
    maze[nx][ny].visited=1
    maze[x][y].right=1
    maze[nx][ny].left=1
    
    pset(y*2,x*2-1,0)
   end
  end
  pset(y*2-1,x*2-1,11)
  x=nx
  y=ny
  pset(y*2-1,x*2-1,8)
  
  now=time()
  if(false) then
  for i=0,#maze*2,1 do pset(0,i,7) end
  for j=1,#maze[1]*2,1 do pset(j,0,7) end
  for i=1,m do
   for j=1,n do
 	  pset(j*2, i*2, 7)
 	  if maze[i][j].right==0 then
 	   pset(j*2, i*2-1, 7)
 	  else 
 	   pset(j*2, i*2-1, 0)
 	  end
 	  if maze[i][j].down==0 then
 	   pset(j*2-1, i*2, 7)
 	  else
 	   pset(j*2-1, i*2, 0)
    end
    if maze[i][j].visited==1 then
    end
   end
  end
  last=now
  end
  
  if(btnp(5)) return maze
  -- check finished
  finished = true
  for i=1,m do
 	 for j=1,n do
 	  if maze[i][j].visited!=1 then
 	   finished=false
 	  end
 	 end
  end
 end
 return maze
end
   
function draw_maze(m)
 cls()
 c1=7
 c2=7
 c3=7
 -- set debug to true somewhere to get
 -- debug colours to help diagnose drawing bugs
 if (debug) then c1=8 c2=11 c3=12 end
 for i=0,#m*2,1 do pset(0,i,7) end
 for j=1,#m[1]*2,1 do pset(j,0,7) end
 for i=1,#m do
 	for j=1,#m[1] do
 	 pset(j*2, i*2, c1)
 	 if m[i][j].right==0 then
 	  pset(j*2, i*2-1, c2)
 	 end
 	 if m[i][j].down==0 then
 	  pset(j*2-1, i*2, c3)
 	 end
 	end
 end
end

menu_items={{"binary_tree",binary_tree},
            {"aldous-broder(slow,rec:size<30)", aldous_broder},
            {"sidewinder", sidewinder}}
in_menu=true
selected=1
maze_fn = binary_tree
maze_size = 63

function start_drawing()
 maze_fn = menu_items[selected][2]
 maze = maze_fn(maze_size,maze_size)
 in_menu=false
end

function draw_menu() 
 cls()
 print("select algorithm:", 6, 12, 7)
 print("< size:"..maze_size.." >", 6, 0, 7)
 for i=1,#menu_items do
  if (selected == i) print(">",0,i*6+14, 7)
  print(menu_items[i][1],5,i*6+14,7)
 end
end

function draw()
 flip()
 if in_menu then
  draw_menu()
 else
  draw_maze(maze)
 end 
 flip()
end

function update()
 while(btnp()==0) do 
  flip()
 end
 if btnp(4) then
  start_drawing()
 end
 if (btnp(5) and not in_menu) then
  if not in_menu then
   in_menu = true
  end
 end
 if in_menu and btnp(2) then
  selected = (selected-1)%(#menu_items+1)
 end
 if in_menu and btnp(3) then
  selected = (selected+1)%(#menu_items+1)
 end
 if (selected==0) selected+=1
 if in_menu and btnp(0) then
  maze_size-=1
 end
 if in_menu and btnp(1) then
  maze_size+=1
 end
 maze_size=max(maze_size,2)
 maze_size=min(maze_size,63)
end

function intro()
 local i=0
 sfx(0)
 while (btn() == 0) do
  cls()
  spr(0, 52, 40, 2, 2)
  spr(18, 68, 48)
  spr(32, 54, 57, 3, 2)
  if(i>10) spr(2,60,40)
  flip()
  i+=1
 end
end

intro()

while(true) do
 draw()
 update()
end

__gfx__
00000000000000000444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000004f4ff4f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000004ffffff400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000004f4ff4f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000004f44f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000444444004ffff4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000566666655666666500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000065566666655600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000665666666665660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000605666666665060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000605555555555060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000600060000600060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000500060000600050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000060000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000050000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06606606660666060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06060606000600060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06000606600600066600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06000606000600060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06000606660666060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66606660060006606660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06006060606060000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06006060666006000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06006060606000600600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06006660606066000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000102030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000101112130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000202122230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000303132330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0101000006770057700577008700097001b1001c1001d1001e10020100211000b7000b7000b7000b7000b7000b700097000b7000b7000b7000c7000c7000e170131701517017170191701a1701c1700a7000a700
