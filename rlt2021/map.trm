global Class, V2 // core.trm
global Entity, Fighter, BasicMonster // gameplay.trm

fn setShadowPal() {
	for (c = 4, 15) {
		pal(c, band(c, 3))
	}
}

global GameMap = Class{
	method isBlocked(pos) {
		return fget(mget(pos:unpack()), 0)
	},

	method draw(c, memory, fov) {
		var cx = c[1]
		var cy = c[2]
		for (x = cx-9, cx+9) {
			for (y = cy-9, cy + 9) {
				if (fov:get{x, y}) {
					pal()
					spr(mget(x, y), x * 8, y * 8)
				} else if (memory:get{x, y}) {
					setShadowPal()
					spr(mget(x, y), x * 8, y * 8)
				}
			}
		}
		pal()
	},
}

global game_map = GameMap()

var Rect = Class{
	method construct(x, y, w, h) {
		self.x1 = x
		self.y1 = y
		self.x2 = x + w
		self.y2 = y + h
	},

	method create() {
		for (x = self.x1+1, self.x2-1) {
			for (y = self.y1+1, self.y2-1) {
				mset(x, y, 65)
			}
		}
	},

	method center() {
		var cx = flr((self.x1 + self.x2) / 2)
		var cy = flr((self.y1 + self.y2) / 2)
		return cx, cy
	},

	method intersects(other) {
		return self.x1 <= other.x2 && self.x2 >= other.x1 && self.y1 <= other.y2 && self.y2 >= other.y1
	},
}

fn createHTunnel(x1, x2, y) {
	for (x = min(x1, x2), max(x1, x2)) {
		mset(x, y, 65)
	}
}

fn createVTunnel(y1, y2, x) {
	for (y = min(y1, y2), max(y1, y2)) {
		mset(x, y, 65)
	}
}

fn anyEntitiesAt(entities, pos) {
	for (e in all(entities)) {
		if (e.pos == pos) {
			return true
		}
	}
	return false
}

fn placeEntities(room, entities, max_monsters_per_room) {
	var n = flr(rnd(max_monsters_per_room))

	for (i = 1, n) {
		var x = room.x1 + 1 + flr(rnd(room.x2 - room.x1 - 2))
		var y = room.y1 + 1 + flr(rnd(room.y2 - room.y1 - 2))

		if (!anyEntitiesAt(entities, V2(x, y))) {
			var monster = null
			if (rnd(1) < 0.8) {
				monster = Entity(V2(x, y), 16, "orc", true, Fighter(10, 0, 3), BasicMonster())
			} else {
				monster = Entity(V2(x, y), 17, "troll", true, Fighter(16, 1, 4), BasicMonster())
			}
			add(entities, monster)
		}
	}
}

var room_max_size = 10
var room_min_size = 6
var max_rooms = 30
var map_width = 128
var map_height = 64
var wall_sprite = 64
var max_monsters_per_room = 3
var save_map = false

global fn makeMap(entities) {
	for (x = 0, map_width) {
		for (y = 0, map_height) {
			mset(x, y, wall_sprite)
		}
	}
	var start_x = 0
	var start_y = 0
	var rooms = {}
	for (r = 1, max_rooms) {
		var w = room_min_size + flr(rnd(room_max_size))
		var h = room_min_size + flr(rnd(room_max_size))
		var x = flr(rnd(map_width - w))
		var y = flr(rnd(map_height - h))
		var new_room = Rect(x, y, w, h)
		var any_clash = false
		for (other in all(rooms)) {
			if (new_room:intersects(other)) {
				any_clash = true
				break
			}
		}
		if (!any_clash) {
			new_room:create()
			var nx, ny = new_room:center()
			if (#rooms == 0) {
				start_x = nx
				start_y = ny
			} else {
				var px, py = rooms[#rooms]:center()
				if (rnd(1) < 0.5) {
					createHTunnel(px, nx, py)
					createVTunnel(py, ny, nx)
				} else {
					createVTunnel(py, ny, px)
					createHTunnel(px, nx, ny)
				}
			}
			placeEntities(new_room, entities, max_monsters_per_room)
			add(rooms, new_room)
		}
	}
	foreach(rooms, Rect.create)
	if (save_map) {
		cstore(0x1000, 0x1000, 0x2000)
	}
	return V2(start_x, start_y)
}
