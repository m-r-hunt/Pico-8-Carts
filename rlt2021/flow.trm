global V2, Grid // core.trm
global game_map, makeMap // map.trm
global entities, getBlockingEntitiesAt, Entity, Fighter, Inventory // gameplay.trm
global calculateFOV // fov.trm
global fov_map, memory, player, dungeon_level // state.trm
global tickParticles, drawParticles, addNumber // particles.trm
global addXp, current_level, current_xp // level.trm

var draw = null

fn drawGameplay() {
	cls()

	camera((player.pos*8 - V2(64, 64)):unpack())

	game_map:draw(player.pos, memory, fov_map)

	for (z = 0,3) {
		foreach(entities, fn(e) {
			if (e.z == z && (fov_map:get(e.pos:floored()) || (e.stairs && memory:get(e.pos:floored())))) {
				e:draw()
			}
		})
	}

	drawParticles()

	camera()
	print("lv"..current_level, 0, 121, 7)
	print("hp", 16, 121, 7)
	rectfill(25, 121, 25+player.fighter.hp, 126, 8)
	rect(24, 120, 24+player.fighter.max_hp, 127, 7)
	print("floor "..dungeon_level, 100, 121)
}

var options = {"pickup", "use item"}
var selected = 1

fn drawMenu() {
	drawGameplay()
	for (i = 1, #options) {
		print(options[i], 20, 20 + i * 8, 8)
		if (i == selected) {
			print(">", 17, 20 + i * 8, 8)
		}
	}
}

fn actionMenu() {
	draw = drawMenu
	selected = 1
	options = {"pickup", "use item"}
	while (true) {
		yield()
		if (btnp(2)) {
			selected -= 1
			if (selected <= 0) {
				selected = #options
			}
		}
		if (btnp(3)) {
			selected += 1
			if (selected > #options) {
				selected = 1
			}
		}
		if (btnp(4)) {
			draw = drawGameplay
			if (options[selected] == "pickup") {
				return {pickup = true}
			} else if (options[selected] == "use item") {
				return {use_item = true}
			}
		}
		if (btnp(5)) {
			draw = drawGameplay
			return null
		}
	}
}

fn handleKeys() {
	if (btnp(0)) {
		return {move = V2(-1, 0)}
	}
	if (btnp(1)) {
		return {move = V2(1, 0)}
	}
	if (btnp(2)) {
		return {move = V2(0, -1)}
	}
	if (btnp(3)) {
		return {move = V2(0, 1)}
	}
	if (btnp(4)) {
		for (e in all(entities)) {
			if (e.stairs && e.pos == player.pos) {
				return {take_stairs = true}
			}
		}
		return {wait = true}
	}
	if (btnp(5)) {
		return actionMenu()
	}

	return {}
}

fn blocks_fov(pos) {
	return fget(mget(pos:unpack()), 1)
}

fn drawGameOver() {
	cls()
	print("game over", 40, 34, 7)
	print("press (x) or (o) to quit", 22, 60, 7)
}

fn gameOver() {
	draw = drawGameOver
	while(true) {
		yield()

		if (btnp(4) || btnp(5)) {
			return
		}
	}
}

fn new_floor() {
	entities = {player}
	player.pos = makeMap(entities)
	fov_map = calculateFOV(blocks_fov, player.pos, 10)
	memory = Grid()
	memory:unionWith(fov_map)
}

fn levelUp() {
	draw = drawMenu
	selected = 1
	options = {"+20 hp", "+1 str", "+1 def"}
	while (true) {
		yield()
		if (btnp(2)) {
			selected -= 1
			if (selected <= 0) {
				selected = #options
			}
		}
		if (btnp(3)) {
			selected += 1
			if (selected > #options) {
				selected = 1
			}
		}
		if (btnp(4)) {
			draw = drawGameplay
			if (options[selected] == "+20 hp") {
				player.fighter.max_hp += 20
				player.fighter.hp += 20
			} else if (options[selected] == "+1 str") {
				player.fighter.power += 1
			} else if (options[selected] == "+1 def") {
				player.fighter.defence += 1
			}
			return
		}

	}
}

fn gameplay() {
	dungeon_level = 1

	player = Entity(V2(8, 8), 1, "player", true, Fighter(30, 2, 5), null, null, Inventory(26))
	current_level = 1
	current_xp = 0
	new_floor()

	draw = drawGameplay
	while (true) {
		yield()
		var action = handleKeys()
		if (action) {
			var turn_taken = false
			if (action.move) {
				turn_taken = true
				var dx = player.pos + action.move
				if (!game_map:isBlocked(dx)) {
					var target = getBlockingEntitiesAt(dx)

					if (target) {
						var xp = player.fighter:attack(target)
						var levelled = addXp(xp)
						if (levelled) {
							levelUp()
						}
					} else {
						player:move(dx)
						fov_map = calculateFOV(blocks_fov, player.pos, 10)
						memory:unionWith(fov_map)
					}
				}
			} else if (action.wait) {
				turn_taken = true
				addNumber("z", 6, player.pos * 8, V2(0, -0.5), 180)
			} else if (action.pickup) {
				for (e in all(entities)) {
					if (e.item && e.x == player.x && e.y == player.y) {
						turn_taken = true
						player.inventory:addItem(e)
						break
					}

				}
			} else if (action.use_item) {
				if (player.inventory:hasItem()) {
					turn_taken = true
					player.inventory:useItem()
				}
			} else if (action.take_stairs) {
				new_floor()
				turn_taken = true
			}

			if (turn_taken) {
				foreach(entities, fn(e) {
					if (e.ai) {
						e.ai:takeTurn()
					}
				})

				if (player.fighter.hp <= 0) {
					return gameOver()
				}
			}
		}
	}
}

fn drawMain() {
	cls()
	print("roguelike tutorial project", 14, 20, 7)
	print("by maximilian hunt", 24, 26, 7)
	print("press (x) or (o) to start", 22, 60, 7)
}

fn main() {
	while (true) {
		draw = drawMain
		yield()
		if (btnp(4) || btnp(5)) {
			gameplay()
		}
	}
}

var main_thread = null
fn _init() {
	main_thread = cocreate(main)
}

fn _update60() {
	tickParticles()
	assert(coresume(main_thread))
}

fn _draw() {
	draw()
}
