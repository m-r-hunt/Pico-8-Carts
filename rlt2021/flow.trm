global V2, Grid // core.trm
global game_map, makeMap // map.trm
global entities, getBlockingEntitiesAt, Entity, Fighter, cleanupDeads // gameplay.trm
global calculateFOV // fov.trm
global fov_map, memory, player, message // state.trm
global tickParticles, drawParticles, addNumber // particles.trm

var draw = null

fn handleKeys() {
	if (btnp(0)) {
		return {move = V2(-1, 0)}
	}
	if (btnp(1)) {
		return {move = V2(1, 0)}
	}
	if (btnp(2)) {
		return {move = V2(0, -1)}
	}
	if (btnp(3)) {
		return {move = V2(0, 1)}
	}
	if (btnp(4)) {
		return {wait = true}
	}

	return {}
}

fn blocks_fov(pos) {
	return fget(mget(pos:unpack()), 1)
}

fn drawGameOver() {
	cls()
	print("game over", 40, 64, 7)
}

fn gameOver() {
	draw = drawGameOver
	while(true) {
		yield()
	}
}

fn drawMain() {
	cls()

	camera((player.pos*8 - V2(64, 64)):unpack())

	game_map:draw(player.pos, memory, fov_map)

	for (z = 1,3) {
		foreach(entities, fn(e) {
			if (e.z == z && fov_map:get(e.pos:floored())) {
				e:draw()
			}
		})
	}

	drawParticles()

	camera()
	print(message, 0, 0, 7)
	print("HP", 0, 121, 7)
	rect(8, 120, player.fighter.max_hp+10, 127, 7)
	rectfill(9, 121, player.fighter.hp + 9, 126, 8)
}

fn main() {
	draw = drawMain
	while (true) {
		yield()
		var action = handleKeys()
		var turn_taken = false
		if (action.move) {
			turn_taken = true
			var dx = player.pos + action.move
			if (!game_map:isBlocked(dx)) {
				var target = getBlockingEntitiesAt(dx)

				if (target) {
					player.fighter:attack(target)
				} else {
					message = ""
					player:move(dx)
					fov_map = calculateFOV(blocks_fov, player.pos, 10)
					memory:unionWith(fov_map)
				}
			}
		} else if (action.wait) {
			turn_taken = true
			addNumber("z", 6, player.pos * 8, V2(0, -0.5), 180)
		}

		if (turn_taken) {
			foreach(entities, fn(e) {
				if (e.ai) {
					e.ai:takeTurn()
				}
			})

			if (player.fighter.hp <= 0) {
				return gameOver()
			}
		}
	}
}

var main_thread = null
fn _init() {
	main_thread = cocreate(main)

	player = Entity(V2(8, 8), 1, "player", true, Fighter(30, 2, 5))
	entities = {player}
	player.pos = makeMap(entities)
	fov_map = calculateFOV(blocks_fov, player.pos, 10)
	memory = Grid()
	memory:unionWith(fov_map)
	message = ""
}

fn _update60() {
	tickParticles()
	assert(coresume(main_thread))
}

fn _draw() {
	draw()
}
