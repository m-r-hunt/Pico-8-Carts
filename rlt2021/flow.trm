global V2, Grid // core.trm
global game_map, makeMap // map.trm
global entities, getBlockingEntitiesAt, Entity, Fighter // gameplay.trm
global calculateFOV // fov.trm
global fov_map, memory, player, message // state.trm

fn handleKeys() {
	if (btnp(0)) {
		return {move = V2(-1, 0)}
	}
	if (btnp(1)) {
		return {move = V2(1, 0)}
	}
	if (btnp(2)) {
		return {move = V2(0, -1)}
	}
	if (btnp(3)) {
		return {move = V2(0, 1)}
	}

	return {}
}

fn blocks_fov(pos) {
	return fget(mget(pos:unpack()), 1)
}

fn main() {
	while (true) {
		var dt = yield()
		var action = handleKeys()
		if (action.move) {
			var dx = player.pos + action.move
			if (!game_map:isBlocked(dx)) {
				var target = getBlockingEntitiesAt(dx)

				if (target) {
					message = "you kick the "..target.name.." in the nuts"
				} else {
					message = ""
					player:move(dx)
					fov_map = calculateFOV(blocks_fov, player.pos, 10)
					memory:unionWith(fov_map)
				}

				foreach(entities, fn(e) {
					if (e.ai) {
						e.ai:takeTurn()
					}
				})
			}
		}
	}
}

var main_thread = null
fn _init() {
	main_thread = cocreate(main)

	player = Entity(V2(8, 8), 1, "player", true, Fighter(30, 2, 5))
	entities = {player}
	player.pos = makeMap(entities)
	fov_map = calculateFOV(blocks_fov, player.pos, 10)
	memory = Grid()
	memory:unionWith(fov_map)
	message = ""
}

fn _update(dt) {
	assert(coresume(main_thread, dt))
}

fn _draw() {
	cls()

	camera((player.pos*8 - V2(64, 64)):unpack())

	game_map:draw(player.pos, memory, fov_map)

	foreach(entities, fn(e) {
		if (fov_map:get(e.pos)) {
			e:draw()
		}
	})

	camera()
	print(message, 0, 0, 7)
}
