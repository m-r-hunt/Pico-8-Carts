global Class, V2 // core.trm
global GameMap // map.trm
global fov_map, player, entities, held_item // state.trm
global pathfind // pathfind.trm
global addNumber // particles.trm

var animation_time = 6

global fn getBlockingEntitiesAt(dx) {
	for (e in all(entities)) {
		if (e.blocks && e.pos == dx) {
			return e
		}
	}
}

global Fighter = Class{
	method construct(hp, defence, power, xp) {
		self.max_hp = hp
		self.hp = hp
		self.defence = defence
		self.power = power
		self.xp = xp
	},

	method takeDamage(amount) {
		self.hp -= amount
		if (self.hp < 0 && self.owner != player) {
			self.owner.sprite += 16
			self.owner.blocks = false
			self.owner.name = "Remains of "..self.owner.name
			self.owner.fighter = null
			self.owner.ai = null
			self.owner.z = 1

			return self.xp
		}
		return 0
	},

	method heal(amount) {
		self.hp = min(self.hp + amount, self.max_hp)
	},

	method attack(target) {
		var damage = self.power - target.fighter.defence
		var xp = target.fighter:takeDamage(damage)
		addNumber(damage, 8, target.pos * 8 + V2(2, 0), V2(0, -1), 120)

		var init = self.owner.pos
		var dx = target.pos
		var t = 0
		while (t < animation_time/2) {
			yield()
			if (btnp() != 0) {
				break
			}
			t += 1
			self.owner.pos = init + (dx - init) * (t / animation_time)
		}
		while (t >= 0) {
			yield()
			if (btnp() != 0) {
				break
			}
			t -= 1
			self.owner.pos = init + (dx - init) * (t / animation_time)
		}
		self.owner.pos = init
		return xp
	},
}

global BasicMonster = Class{
	method takeTurn() {
		if (fov_map:get(self.owner.pos)) {
			if (self.owner:distanceTo(player) > 1) {
				self.owner:moveTowards(player.pos)
			} else if (player.fighter.hp > 0) {
				self.owner.fighter:attack(player)
			}
		}
	},
}

global fn pickupItem(item) {
	if (held_item) {
		held_item.pos = item.pos
		add(entities, held_item)
	}
	held_item = item
	del(entities, item)
}

global fn useItem() {
	if (held_item) {
		var consumed = held_item.item:use_function()
		if (consumed) {
			held_item = null
		}
	}
}

global Item = Class{
	method construct(use_function) {
		self.use_function = use_function
	},
}

fn blocks(pos) {
	return GameMap:isBlocked(pos)
}

global Stairs = Class{
	method construct(floor) {
		self.floor = floor
	}
}

global Entity = Class{
	method construct(pos, sprite, name, blocks, fighter, ai, item, stairs) {
		self.pos = pos
		self.sprite = sprite
		self.name = name
		self.blocks = blocks
		self. fighter = fighter
		self.ai = ai
		self.item = item
		self.stairs = stairs
		self.z = 3

		if (self.fighter) {
			self.fighter.owner = self
		}
		if (self.ai) {
			self.ai.owner = self
		}
		if (self.stairs) {
			self.stairs.owner = self
		}
	},

	method move(dx) {
		var init = self.pos
		var t = 0
		while (t < animation_time) {
			yield()
			if (btnp() != 0) {
				break
			}
			t += 1
			self.pos = init + (dx - init) * (t/animation_time)
		}
		self.pos = dx
	},

	method moveTowards(tpos, entities) {
		var path = pathfind(self.pos, tpos, blocks)
		if (path && #path >= 3 && !getBlockingEntitiesAt(path[2])) {
			self:move(path[2])
		}
	},

	method distanceTo(other) {
		return #(other.pos - self.pos)
	},

	method draw() {
		spr(self.sprite, (self.pos * 8):unpack())
	},
}
