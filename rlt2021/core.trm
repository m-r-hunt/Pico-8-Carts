fn new(class, ...) {
	var n = setmetatable({}, {__index = class})
	if (class.construct) {
		n:construct(...)
	}
	return n
}
global fn Class(table) {
	return setmetatable(table, {__call = new})
}

global V2
V2 = {
	method __add(other) {
		return V2(self.x + other.x, self.y + other.y)
	},
	method __sub(other) {
		return V2(self.x - other.x, self.y - other.y)
	},
	method __mul(s) {
		return V2(s*self.x, s*self.y)
	},
	method _unm() {
		return V2(-self.x, -self.y)
	},
	method __len() {
		return sqrt(self.x^2 + self.y^2)
	},
	method __eq(other) {
		return self.x == other.x && self.y == other.y
	},
	method unpack() {
		return self.x, self.y
	}
}
V2.__index = V2
fn makeV2(t, x, y) {
	return setmetatable({x = x, y = y}, t)
}
setmetatable(V2, {__call = makeV2})

global Grid = Class{
	method construct() {
		self.set = {}
	},

	method add(pos, val) {
		self.set[pos.x] = self.set[pos.x] || {}
		self.set[pos.x][pos.y] = val
	},

	method get(pos) {
		return self.set[pos.x] && self.set[pos.x][pos.y]
	},

	method unionWith(other) {
		for (x, row in pairs(other.set)) {
			for (y, v in pairs(row)) {
				self:add(V2(x, y), v)
			}
		}
	},
}
